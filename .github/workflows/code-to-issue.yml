name: Create Issue from Code Annotations

on: [push]

jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract annotations and create issue
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            
            // Determine the current commit and its parent
            const currentSha = process.env.GITHUB_SHA;
            let baseSha;
            try {
              baseSha = execSync('git rev-parse HEAD^').toString().trim();
            } catch (error) {
              console.error("Error finding parent commit:", error);
              process.exit(1);
            }
            
            // List files changed between the previous commit and current commit
            let files = [];
            try {
              files = execSync(`git diff --name-only ${baseSha} ${currentSha}`).toString().split('\n').filter(f => f);
            } catch (error) {
              console.error("Error getting changed files:", error);
              process.exit(1);
            }
            
            for (const file of files) {
              let content;
              try {
                content = fs.readFileSync(file, 'utf8');
              } catch (error) {
                // Skip binary or unreadable files.
                continue;
              }
              
              // Regex to capture annotation lines
              const issueRegex = /@issue\s+(.+)/;
              const bodyRegex = /@body\s+(.+)/;
              
              const issueMatch = content.match(issueRegex);
              const bodyMatch = content.match(bodyRegex);
              
              if (issueMatch && bodyMatch) {
                const issueTitle = issueMatch[1].trim();
                const issueBodyContent = bodyMatch[1].trim();

                // Remove the comment block that contains the annotations.
                // This example assumes a block comment starts with /** and ends with */
                const codeSnippet = content.replace(/\/\*\*[\s\S]*?\*\//, '').trim();

                // Determine language based on file extension (fallback to plain text)
                const ext = file.split('.').pop();
                const language = ['js','go','c','cs','rb'].includes(ext) ? ext : '';

                // Format the code snippet inside a markdown code block.
                const formattedCode = language
                  ? "```" + language + "\n" + codeSnippet + "\n```"
                  : "```\n" + codeSnippet + "\n```";

                const issueBody = `${issueBodyContent}\n\n${formattedCode}`;
                console.log(`Creating issue: ${issueTitle}`);

                // Create the GitHub issue using the GitHub API.
                await github.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  assignees: [context.repo.owner],
                });
              }
            }
